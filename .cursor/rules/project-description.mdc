# Courses Platform .NET Project Rules

You are a senior .NET backend developer working on a Learning Management System (LMS) called "Courses Platform" using .NET 8, Entity Framework Core, SQL Server, ASP.NET Core Identity, and Mapster.

## Project Architecture
This project follows Clean Architecture with these layers:
- **Courses.Api**: Web API controllers and presentation layer
- **Courses.Application**: Business logic, DTOs, services, and application contracts
- **Courses.Domain**: Domain entities, value objects, and business rules
- **Courses.Infrastructure**: Data access, repository implementations, and external services
- **Courses.Shared**: Common utilities, shared models, and cross-cutting concerns

## Domain Model Overview
The platform supports:
- **Students**: Can enroll in courses, track progress, take quizzes, and receive certificates
- **Instructors**: Can create and manage courses, sections, videos, notes, and quizzes
- **Courses**: Have sections containing videos and notes, with associated quizzes
- **Progress Tracking**: Monitor student video/note consumption
- **Assessment System**: Quizzes with questions, answers, and attempts
- **Certification**: Automatic certificate generation upon course completion

## Core Entities Structure
```csharp
// Primary Entities
- Course: CourseId, Title, Description, InstructorId, IsActive, CreatedDate, UpdatedDate
- Instructor: InstructorId, Name, Email, PasswordHash, Bio, CreatedDate, UpdatedDate
- Student: StudentId, Name, Email, PasswordHash, CreatedDate, UpdatedDate
- Section: SectionId, CourseId, Title, Order, CreatedDate, UpdatedDate
- Video: VideoId, SectionId, Title, URL, Duration, CreatedDate, UpdatedDate
- Note: NoteId, SectionId, Title, Content, CreatedDate, UpdatedDate
- Quiz: QuizId, CourseId, Title, PassingScore
- Question: QuestionId, QuizId, Text, Type
- Answer: AnswerId, QuestionId, Text, IsCorrect
- Certificate: CertificateId, EnrollmentId, IssueDate, CertificateURL

// Relationship Entities
- Enrollment: EnrollmentId, StudentId, CourseId, EnrollmentDate, CompletionDate
- VideoProgress: VideoProgressId, EnrollmentId, VideoId, ViewedDate
- NoteProgress: NoteProgressId, EnrollmentId, NoteId, ViewedDate
- QuizAttempt: AttemptId, EnrollmentId, QuizId, Score, AttemptDate
- StudentAnswer: StudentAnswerId, AttemptId, QuestionId, SelectedAnswerId
```

## Technology Stack Rules

### Entity Framework Core with SQL Server
- Use Entity Framework Core 8.0+ with SQL Server as the primary database
- Implement DbContext in Infrastructure layer
- Use migrations for database schema changes
- Apply proper indexes on frequently queried fields (CourseId, StudentId, InstructorId)
- Use lazy loading judiciously; prefer explicit loading for performance-critical scenarios
- Implement soft delete using IsActive fields where applicable

### ASP.NET Core Identity Integration
- Use ASP.NET Core Identity for user authentication and authorization
- Implement role-based authorization with "Student" and "Instructor" roles
- Extend IdentityUser to accommodate Student and Instructor entities
- Use JWT tokens for API authentication
- Implement custom authorization policies for course access and instructor ownership

### Mapster for Object Mapping
- Use Mapster for mapping between entities, DTOs, and view models
- Define mapping configurations in the Application layer
- Create specific DTOs for different operations (Create, Update, Response)
- Avoid exposing domain entities directly through APIs

## Layer-Specific Guidelines

### Domain Layer (Courses.Domain)
- Contains pure domain entities with business logic
- No dependencies on external frameworks except minimal annotations
- Implement domain events for cross-cutting concerns
- Use value objects for complex types (e.g., CourseStatus, StudentProgress)
- Include domain validation rules within entities

### Application Layer (Courses.Application)
- Implement CQRS pattern with separate commands and queries
- Use MediatR for handling commands and queries
- Define interfaces for repositories and external services
- Create DTOs for data transfer between layers
- Implement business logic validation using FluentValidation
- Configure Mapster mapping profiles

### Infrastructure Layer (Courses.Infrastructure)
- Implement repository pattern with Unit of Work
- Configure Entity Framework DbContext and entity configurations
- Implement external service integrations (file storage, email, etc.)
- Handle database connection and transaction management
- Implement caching strategies using IMemoryCache or Redis

### API Layer (Courses.Api)
- Use attribute routing with RESTful conventions
- Implement proper HTTP status codes and error responses
- Use action filters for cross-cutting concerns (logging, validation)
- Configure Swagger/OpenAPI documentation
- Implement rate limiting and request validation

## Naming Conventions and Code Style

### Entity and DTO Naming
```csharp
// Entities (Domain)
public class Course { }
public class CourseSection { }
public class StudentEnrollment { }

// DTOs (Application)
public class CreateCourseDto { }
public class UpdateCourseDto { }
public class CourseResponseDto { }
public class CourseDetailsDto { }

// Commands/Queries (Application)
public class CreateCourseCommand { }
public class GetCourseByIdQuery { }
public class UpdateCourseCommand { }
```

### Controller and Service Naming
```csharp
// Controllers (API)
[Route("api/[controller]")]
public class CoursesController { }
public class EnrollmentsController { }
public class InstructorCoursesController { }

// Services (Application)
public interface ICourseService { }
public interface IEnrollmentService { }
public interface IProgressTrackingService { }
```

## Business Logic Implementation

### Course Management
- Instructors can only manage their own courses
- Courses can be archived using IsActive flag
- Section ordering must be maintained within a course
- Video/Note content must be validated before saving

### Enrollment and Progress Tracking
- Students can only enroll in active courses
- Progress tracking is automatic when viewing content
- Completion percentage calculation based on viewed content
- Certificate generation upon 100% completion and quiz passing

### Quiz and Assessment System
- Multiple question types support (Multiple Choice, True/False, etc.)
- Quiz attempts are tracked with timestamps
- Passing score validation before certificate generation
- Prevent multiple submissions of the same quiz attempt

### Authorization Rules
```csharp
// Course Access
- Students: Can only view enrolled courses
- Instructors: Can only manage their own courses
- Admins: Full access to all courses

// Content Access
- Videos/Notes: Only accessible to enrolled students
- Quizzes: Only accessible to enrolled students who completed required content
- Certificates: Only accessible to students who completed the course
```

## Performance and Security Guidelines

### Performance Optimization
- Use async/await for all I/O operations
- Implement pagination for course listings and student progress
- Use projection queries to fetch only required data
- Implement caching for frequently accessed course metadata
- Optimize video streaming and file delivery

### Security Implementation
- Validate all input data using Data Annotations and FluentValidation
- Implement proper CORS policies
- Use HTTPS everywhere
- Sanitize user-generated content (course descriptions, notes)
- Implement rate limiting for API endpoints
- Log security-related events

### Data Validation Rules
```csharp
// Course validation
- Title: Required, max 200 characters
- Description: Required, max 2000 characters
- Only active instructors can create courses

// Student validation
- Email: Valid format, unique
- Password: Strong password requirements
- Name: Required, max 100 characters

// Progress validation
- Video progress: Can only be marked for enrolled students
- Quiz attempts: Validate enrollment and completion prerequisites
```

## Error Handling and Logging
- Use global exception handling middleware
- Implement custom exception types for business logic violations
- Log all significant operations and errors
- Return consistent error response format
- Handle optimistic concurrency conflicts

## Testing Strategy
- Write unit tests for business logic in Application layer
- Implement integration tests for API endpoints
- Use in-memory database for testing
- Mock external dependencies
- Test authorization and security scenarios

## API Endpoint Structure
```csharp
// Course Management
GET /api/courses - List active courses
GET /api/courses/{id} - Get course details
POST /api/courses - Create new course (Instructor only)
PUT /api/courses/{id} - Update course (Owner only)
DELETE /api/courses/{id} - Archive course (Owner only)

// Enrollment Management
POST /api/enrollments - Enroll in course
GET /api/enrollments/my-courses - Get student's enrolled courses
GET /api/enrollments/{id}/progress - Get enrollment progress

// Content Access
GET /api/courses/{courseId}/sections - Get course sections
GET /api/sections/{sectionId}/videos - Get section videos
GET /api/sections/{sectionId}/notes - Get section notes
POST /api/progress/videos/{videoId} - Mark video as viewed

// Quiz System
GET /api/courses/{courseId}/quizzes - Get course quizzes
POST /api/quizzes/{quizId}/attempts - Submit quiz attempt
GET /api/attempts/{attemptId}/results - Get quiz results

// Certificate Management
GET /api/enrollments/{enrollmentId}/certificate - Download certificate
```

## Future Enhancements Ready
- Payment integration: Add Price field to Course entity
- Live courses: Add CourseType and LiveSession entities
- Course categories: Add Category entity and relationships
- Assignments: Add Assignment and Submission entities
- Comments: Add Comment entity for course discussions
- Course ratings: Add Rating entity for course feedback

## Database Indexing Strategy
```sql
-- Performance indexes
CREATE INDEX IX_Course_InstructorId ON Courses(InstructorId);
CREATE INDEX IX_Enrollment_StudentId ON Enrollments(StudentId);
CREATE INDEX IX_Enrollment_CourseId ON Enrollments(CourseId);
CREATE INDEX IX_Section_CourseId_Order ON Sections(CourseId, [Order]);
CREATE INDEX IX_VideoProgress_EnrollmentId ON VideoProgress(EnrollmentId);
CREATE INDEX IX_QuizAttempt_EnrollmentId ON QuizAttempts(EnrollmentId);
```

Follow Microsoft's official documentation and ASP.NET Core best practices for implementation details. Prioritize code maintainability, performance, and security in all development decisions.

## Redis Integration and Caching Strategy

### Redis Configuration
- Use Redis as distributed cache for improved performance
- Implement Redis in Infrastructure layer with IDistributedCache
- Configure Redis connection strings in appsettings
- Use Redis for session storage in multi-instance deployments

### Caching Implementation
```csharp
// Caching patterns
- Course metadata: Cache for 30 minutes
- User sessions: Cache until logout
- Video metadata: Cache for 2 hours
- Quiz questions: Cache per session
- Student progress: Cache for 5 minutes

// Cache keys naming convention
private const string COURSE_CACHE_KEY = "course:{courseId}";
private const string USER_COURSES_CACHE_KEY = "user:{userId}:courses";
private const string PROGRESS_CACHE_KEY = "progress:{enrollmentId}";
```

### Redis Services Implementation
```csharp
// Infrastructure layer
public interface ICacheService
{
    Task<T> GetAsync<T>(string key);
    Task SetAsync<T>(string key, T value, TimeSpan? expiry = null);
    Task RemoveAsync(string key);
    Task RemovePatternAsync(string pattern);
}

public class RedisCacheService : ICacheService
{
    private readonly IDistributedCache _cache;
    // Implementation details...
}
```

## Real-time Notifications System

### Notification Domain Model
```csharp
// Domain entities
public class Notification 
{
    public int NotificationId { get; set; }
    public int UserId { get; set; }
    public string Title { get; set; }
    public string Content { get; set; }
    public NotificationType Type { get; set; }
    public bool IsRead { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime? ReadDate { get; set; }
    public string ActionUrl { get; set; }
}

public enum NotificationType
{
    CourseEnrollment,
    QuizCompleted,
    CertificateIssued,
    CourseUpdated,
    NewCourseAvailable,
    PaymentReceived
}
```

### SignalR Integration
```csharp
// Real-time notifications using SignalR
public class NotificationHub : Hub
{
    public async Task JoinUserGroup(string userId)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, $"User_{userId}");
    }
}

// Notification service
public interface INotificationService
{
    Task SendNotificationAsync(int userId, NotificationType type, string title, string content);
    Task SendBulkNotificationAsync(List<int> userIds, NotificationType type, string title, string content);
    Task MarkAsReadAsync(int notificationId, int userId);
    Task<List<NotificationDto>> GetUserNotificationsAsync(int userId, bool unreadOnly = false);
}
```

### Notification API Endpoints
```csharp
// API endpoints for notifications
GET /api/notifications - Get user notifications
PUT /api/notifications/{id}/read - Mark notification as read
PUT /api/notifications/read-all - Mark all as read
GET /api/notifications/unread-count - Get unread count
```

## Enhanced Security Implementation

### Data Encryption
```csharp
// Sensitive data encryption
public interface IDataProtectionService
{
    string EncryptSensitiveData(string data);
    string DecryptSensitiveData(string encryptedData);
}

// Entity configurations for sensitive data
public class StudentConfiguration : IEntityTypeConfiguration<Student>
{
    public void Configure(EntityTypeBuilder<Student> builder)
    {
        // Encrypt email and phone if required by GDPR
        builder.Property(e => e.Email)
               .HasConversion(
                   v => _dataProtection.EncryptSensitiveData(v),
                   v => _dataProtection.DecryptSensitiveData(v));
    }
}
```

### CSRF Protection
```csharp
// Configure anti-forgery tokens
services.AddAntiforgery(options =>
{
    options.HeaderName = "X-CSRF-TOKEN";
    options.SameSite = SameSiteMode.Strict;
});

// Use in controllers
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> CreateCourse([FromBody] CreateCourseDto dto) { }
```

### Security Monitoring and Logging
```csharp
// Security event logging
public interface ISecurityLogger
{
    Task LogSecurityEventAsync(SecurityEventType eventType, string userId, string details);
    Task LogSuspiciousActivityAsync(string ipAddress, string userAgent, string action);
    Task LogDataAccessAsync(string userId, string resourceType, string resourceId);
}

public enum SecurityEventType
{
    LoginAttempt,
    LoginFailure,
    PasswordChange,
    UnauthorizedAccess,
    DataExport,
    SuspiciousActivity
}
```

### GDPR Compliance
```csharp
// GDPR compliance features
public interface IGdprService
{
    Task<UserDataExportDto> ExportUserDataAsync(int userId);
    Task DeleteUserDataAsync(int userId, string reason);
    Task AnonymizeUserDataAsync(int userId);
    Task LogDataProcessingAsync(int userId, string processingType, string legalBasis);
}

// Data retention policies
public class DataRetentionPolicy
{
    public static readonly TimeSpan InactiveStudentDataRetention = TimeSpan.FromDays(1095); // 3 years
    public static readonly TimeSpan CompletedCourseDataRetention = TimeSpan.FromDays(2555); // 7 years
    public static readonly TimeSpan SecurityLogRetention = TimeSpan.FromDays(365); // 1 year
}
```

## Performance Optimization for Scale

### CDN Integration
```csharp
// CDN service for video and file delivery
public interface ICdnService
{
    Task<string> UploadVideoAsync(Stream videoStream, string fileName);
    Task<string> UploadFileAsync(Stream fileStream, string fileName, string contentType);
    string GetCdnUrl(string fileName);
    Task DeleteFileAsync(string fileName);
}

// Video streaming optimization
public class VideoStreamingService
{
    public async Task<VideoStreamResponseDto> GetVideoStreamAsync(int videoId, string quality)
    {
        // Implement adaptive bitrate streaming
        // Return appropriate video quality based on user's connection
    }
}
```

### Database Performance Optimization
```csharp
// Database optimization strategies
public static class DatabaseOptimizations
{
    // Read replicas for heavy read operations
    public static void ConfigureReadReplicas(IServiceCollection services)
    {
        services.AddDbContext<ReadOnlyCoursesDbContext>(options =>
            options.UseSqlServer(connectionString, opt => opt.EnableReadOnlyOptimizations()));
    }

    // Partitioning strategies for large tables
    public static void ConfigureTablePartitioning()
    {
        // Partition VideoProgress and QuizAttempt tables by date
        // Partition by StudentId for user-specific queries
    }
}
```

### Async Background Processing
```csharp
// Background services for heavy operations
public class CertificateGenerationService : BackgroundService
{
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        // Process certificate generation queue
        // Send notifications when certificates are ready
    }
}

public class ProgressCalculationService : BackgroundService
{
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        // Calculate and update course completion percentages
        // Update Redis cache with latest progress data
    }
}
```

### Load Balancing and Scaling
```csharp
// Health checks for load balancer
public class DatabaseHealthCheck : IHealthCheck
{
    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        // Check database connectivity and performance
    }
}

// Session state configuration for multiple instances
services.AddStackExchangeRedisCache(options =>
{
    options.Configuration = configuration.GetConnectionString("Redis");
    options.InstanceName = "CoursesPlatform";
});
```

## Monitoring and Observability

### Application Performance Monitoring
```csharp
// Custom metrics for monitoring
public interface IMetricsService
{
    void RecordVideoView(int videoId, int userId);
    void RecordQuizAttempt(int quizId, int score);
    void RecordApiResponseTime(string endpoint, double milliseconds);
    void RecordCacheHitRatio(string cacheKey, bool isHit);
}

// Performance counters
public static class PerformanceCounters
{
    public static readonly string ActiveUsersCount = "courses.users.active";
    public static readonly string VideoStreamsCount = "courses.videos.streams";
    public static readonly string QuizAttemptsCount = "courses.quizzes.attempts";
    public static readonly string CacheHitRatio = "courses.cache.hit_ratio";
}
```

### Logging and Tracing
```csharp
// Structured logging with correlation IDs
public class CorrelationIdMiddleware
{
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        var correlationId = context.Request.Headers["X-Correlation-ID"].FirstOrDefault() 
                          ?? Guid.NewGuid().ToString();
        
        using (LogContext.PushProperty("CorrelationId", correlationId))
        {
            context.Response.Headers.Add("X-Correlation-ID", correlationId);
            await next(context);
        }
    }
}
```

## Configuration Updates
```json
// appsettings.json additions
{
  "Redis": {
    "ConnectionString": "localhost:6379",
    "InstanceName": "CoursesPlatform"
  },
  "Cdn": {
    "BaseUrl": "https://cdn.coursesplatform.com",
    "VideoStorageContainer": "videos",
    "FileStorageContainer": "files"
  },
  "Security": {
    "EncryptionKey": "your-encryption-key",
    "EnableDataEncryption": true,
    "SessionTimeout": "00:30:00"
  },
  "Performance": {
    "CacheExpiration": {
      "CourseData": "00:30:00",
      "UserProgress": "00:05:00",
      "VideoMetadata": "02:00:00"
    }
  }
}
```

هذه الإضافات تغطي:

✅ **Redis Integration** - للكاشينغ المتقدم والجلسات  
✅ **Real-time Notifications** - مع SignalR والإشعارات الفورية  
✅ **Enhanced Security** - تشفير البيانات وحماية CSRF ومراقبة الأمان  
✅ **GDPR Compliance** - لحماية بيانات المستخدمين الأوروبيين  
✅ **CDN Integration** - لتحسين توصيل الفيديوهات والملفات  
✅ **Performance Optimization** - للتعامل مع أعداد كبيرة من المستخدمين  
✅ **Monitoring & Observability** - لمراقبة الأداء والمشاكل  

الآن الـ `project rule` جاهز لتطوير منصة متقدمة وقابلة للتوسع! 🚀
